<?php
/**
 * @file Provides new "Dokuwiki" filter that interprets text as dokuwiki syntax
 * and outputs corresponding rendered HTML.
 */

define("DOKUWIKI_REGEX", "/\[dokuwiki\](.*?)\[\/dokuwiki\]/si");
define("DOKUWIKI_FILTER_SUPPORTED_COMMANDS", "doku2html");

/**
 * Implementation of hook_requirements().
 */
function dokuwiki_requirements($phase) {
	$requirements = array();
	$t = get_t();

	if ($phase == 'runtime') {
		// Check for availability of `doku2html`.
		$output = array();
		$return = 0;
		$command = _dokuwiki_create_filepath(variable_get('dokuwiki_filter_doku2html_path', ''), 'doku2html'); 
		exec("$command -V 2>&1", $output, $return);
		$requirements['doku2html'] = array(
			'title' => $t('Dokuwiki tools'),
			'value' => check_plain(implode('<br />', $output)),
			'severity' => $return != 0 ? REQUIREMENT_ERROR : REQUIREMENT_OK,
		);
	}
	return $requirements;
}

// picks up fragments calling _dokuwiki_filterproc
class DokuwikiFunctor {
	function __construct($callback, $args) {
		$this->callback = $callback;
		$this->args = $args;
	}
	function callback() {
		$args = array_merge(func_get_args(), $this->args);
		return call_user_func_array($this->callback, $args);
	}
	static function create_functor($callback) {
		$args = func_get_args();
		array_shift($args);
		return array(new DokuwikiFunctor($callback, $args), 'callback');
	}
	var $callback;
	var $args;
};

function dokuwiki_filter_info() {
	$filters['dokuwiki'] = array(
		'title' => t('Dokuwiki syntax'),
		'description' => t('Interprets text as Dokuwiki syntax and returns a html code of rendered page.'),
		'process callback' => '_dokuwiki_filter_process',
		'settings callback' => '_dokuwiki_filter_settings',
		'default settings' => array(
			'doku2html_path' => '',
		),
		'tips callback'	=> '_dokuwiki_filter_tips'
	);
	return $filters;
 }

function _dokuwiki_filter_process($text, $format) {
	return preg_replace_callback(DOKUWIKI_REGEX, DokuwikiFunctor::create_functor('_dokuwiki_filterproc', $format), $text);
}

/**
 * Implementation of hook_filter_tips().
 */
function _dokuwiki_filter_tips($filter, $format, $long = false) {
	$output = '';
	if ($long) {
		$output .= t('<h4>Using Dokuwiki filter</h4>');
	}
	$output .= t('Use <a href="@dokuwiki">Dokuwiki syntax</a>.', array('@dokuwiki' => url('https://www.dokuwiki.org/wiki:syntax')));
	$output .= '&nbsp;';
	list($formats, $args) = _dokuwiki_filter_formats();
	if ($long) {
		$output .= t('In the comments, you can specify additional arguments such as:');
		$items = array();
		foreach ($args as $arg => $info) {
			$items[] = '@'. $arg .': '. $info['description'];
		}
		$output .= theme_item_list($items);
	}
	$output .= t('Available formats:');
	$items = array();
	foreach ($formats as $format => $info) {
		$items[] = $format .': '. $info['description'];
	}
	$output .= theme_item_list($items);
	return $output;
}

/**
 * Implementation of hook_file_download().
 */
function dokuwiki_file_download($file) {
	//$file = file_create_path($file);
	$fileuri = file_build_uri($file);
	if (strpos($fileuri, file_default_scheme() . ':/' .'/dokuwiki') !== FALSE) {
		return array(
			'Content-Length: '.filesize($file),
		);
	}
}

/**
 * Implementation of hook_node_delete().
 */
function dokuwiki_node_delete(&$node) {
	// delete the Dokuwiki rendering if any
	$matches = array();
	if (preg_match_all(DOKUWIKI_REGEX, $node->body, $matches)) {
		$dir = file_default_scheme() . ':/' .'/dokuwiki';
		foreach ($matches[1] as $match) {
			$match = str_replace(array("\r\n", "\r"), "\n", $match); // do like filter.module
			$basename = md5($match);
			foreach (file_scan_directory($dir, $basename) as $file) {
				file_delete($file->filename);
			}
		}
	}
}

function _dokuwiki_filter_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
	$filter->settings += $defaults;

	$form = array();
	$form['doku2html_path'] = array(
		'#type' => 'textfield',
		'#title' => t('Path of Dokuwiki commands'),
		'#default_value' => $filter->settings['doku2html_path'],
		'#description' => t('Specify the base path of the Dokuwiki commands (`doku2html`). 
			 Leave blank if these commands are to be found on the system PATH which, on this server, is set to:<br /><pre>@path</pre>',
			 array('@path' => getenv('PATH'))
		 ),
	);
	return $form;
}

function _dokuwiki_create_filepath($path, $filename) {
	if (!empty($path)) {
		return rtrim($path, '/') .'/'. $filename;
	}
	return $filename;
}

function _dokuwiki_filterproc($matches, $format) {
	return dokuwiki_filterproc($matches[1]);
}

function dokuwiki_filterproc($text) {
	// Parse arguments.
	list($formats, $args) = _dokuwiki_filter_formats();
	_dokuwiki_parse_args($text, $args);

	// Check for existing command.
	$supported = array_map('trim', explode(',', variable_get('dokuwiki_filter_commands', DOKUWIKI_FILTER_SUPPORTED_COMMANDS)));
	if (!in_array($args['command']['value'], $supported)) {
		$msg = 'Dokuwiki command `%command` is not supported. Please choose one of (%supported).';
		$arg = array('%command' => $args['command']['value'], '%supported' => implode(', ', $supported));
		drupal_set_message(t($msg, $arg), 'error');
		watchdog('dokuwiki filter', $msg, $arg, WATCHDOG_ERROR);
		return $text;
	}

	// Create a temporary file with the DOKU script.
	$outdir = '/dokuwiki';
	file_prepare_directory(file_build_uri($outdir), FILE_CREATE_DIRECTORY);
	$inpath = file_build_uri($outdir .'/'. md5($text) .'.txt');
	if (!file_exists(drupal_realpath($inpath))) {
		file_put_contents($inpath, $text);
	}

	// Render desired formats.
	$output = '';
	foreach (explode(',', $args['formats']['value']) as $format) {
		$format = trim($format);
		if (!array_key_exists($format, $formats)) {
			$msg = 'Dokuwiki format %format is not supported. Please choose one of (%supported).';
			$arg = array('%format' => $format, '%supported' => implode(', ', array_keys($formats)));
			drupal_set_message(t($msg, $arg), 'error');
			watchdog('dokuwiki filter', $msg, $arg, WATCHDOG_ERROR);
			continue;
		}
		$outpath = file_build_uri($outdir .'/'. md5($text) .'.out.'. $formats[$format]['format']);
		if (file_exists(drupal_realpath($outpath)) || _dokuwiki_filter_render($inpath, $outpath, $formats[$format]['format'], $args['command']['value'])) {
			$output .= '<div class="dokuwiki dokuwiki-'. $format .'">';
			if ($args['link-output']['value']) {
				$output .= l(t($args['title']['value']), file_create_url($outpath), array('attributes' => array('class' => 'dokuwiki-link-output')));
			}
			else {
				$output .= module_invoke($formats[$format]['module'], 'dokuwiki_render', $inpath, $outpath, $format, $args);
			}
			$output .= '</div>';
			if ($args['link-input']['value']) {
				$output .= '<div class="dokuwiki dokuwiki-"'. $format .'>';
				$output .= l(t('Download input script for %title', array('%title' => $args['title']['value'])), file_create_url($inpath), 
					array('html' => TRUE, 'attributes' => array('class' => 'dokuwiki-link-input'))
				);
				$output .= '</div>';
			}
		}
	}
	return $output;
}

function _dokuwiki_filter_formats() {
	// Gather available formats and arguments.
	$formats = array();
	$args = array(
		'command' => array(
			'description' => t('Process the graph script using this Dokuwiki command (`doku2html`, etc).'),
			'value' => 'doku2html',
		),
		'formats' => array(
			'description' => t('Comma-separated list of desired output formats.'),
			'value' => 'html',
		),
		'title' => array(
			'description' => t('Title of the output image.'),
			'value' => '',
		),
		'link-output' => array(
			'description' => t('Output a link to the output image instead of embedding it (needs @title).'),
			'value' => FALSE,
		),
		'link-input' => array(
			'description' => t('Add a link to the input DOT script (needs @title).'),
			'value' => FALSE,
		),
	);
	foreach (module_implements('dokuwiki_formats') as $module) {
		$f = module_invoke($module, 'dokuwiki_formats');
		foreach ($f as $format => $info) {
			$f[$format]['module'] = $module;
			if (isset($f[$format]['arguments']) && is_array($f[$format]['arguments'])) {
				$args += $f[$format]['arguments'];
			}
		}
		$formats += $f;
	}
	return array($formats, $args);
}

function _dokuwiki_filter_render($dotfile, $outputfile, $format, $command) {
	$command = _dokuwiki_create_filepath(variable_get('dokuwiki_filter_doku2html_path', ''), $command);	
	$command .= ' -T'.escapeshellarg($format)
						 .' '.escapeshellarg(drupal_realpath($dotfile))
						 .' 2>&1'
						 .' > '.escapeshellarg(drupal_realpath($outputfile));
	$output = array();
	$return = 0;
	exec($command, $output, $return);
	clearstatcache();
	if ($return != 0) {
		$msg = 'Dokuwiki encountered an error while rendering to format %format:<br />%output';
		$arg = array('%format' => $format, '%output' => check_plain(implode('<br />', $output)));
		drupal_set_message(t($msg, $arg), 'error');
		watchdog('dokuwiki filter', $msg, $arg, WATCHDOG_ERROR);
		return FALSE;
	}
	return TRUE;
}

function _dokuwiki_parse_args($text, &$args) {
	// Parse comments in the DOT syntax to find our arguments.
	// Taken from a discussion in http://ostermiller.org/findcomment.html
	if (!preg_match_all("/(?:\/\*(?:[^*]|(?:\*+[^*\/]))*\*+\/)/", $text, $comments)) return;
	foreach ($comments[0] as $comment) {
		foreach ($args as $key => $info) {
			$value = $info['value'];
			if (($m = _dokuwiki_filter_parse_arg($comment, $key)) !== FALSE) {
				if (is_bool($value)) {
					$args[$key]['value'] = preg_match("/TRUE|YES|ON|1/i", $m) == 1;
				}
				else {
					$args[$key]['value'] = trim($m);
				}
			}
		}
	}
}

function _dokuwiki_filter_parse_arg($text, $arg) {
	// TODO This doesn't handle case /* @arg=value */ i.e. start and close on same line.
	if (preg_match("/@$arg\s*?=\s*?(\w[\w\W]*?)[\r\n]/i", $text, $match)) {
		return $match[1];
	}
	return FALSE;
}

/**
 * Implementation of hook_dokuwiki_formats().
 */ 
function dokuwiki_dokuwiki_formats() {
	$formats = array();
	foreach (array('png', 'jpg', 'gif') as $format) {
		$formats[$format] = array(
			'description' => t('Standard HTML &lt;img&gt; rendering for !format.', array('!format' => strtoupper($format))),
			'format' => $format,
			'arguments' => array(
				'imagemap' => array(
					'description' => t('Create a client-side image map for the output image (TRUE or FALSE).'),
					'value' => FALSE,
				),
			),
		);
	}
	$formats['html'] = array(
		'description' => t('Fully-laid-out HTML rendering of the dokuwiki source.'),
		'format' => 'html',
	);
	return $formats;
}

/**
 * Implementation of hook_dokuwiki_render().
 */
function dokuwiki_dokuwiki_render($inpath, $outpath, $format, $args) {
	if ($format == 'html' ) {
		$output =  file_get_contents($outpath) . "\n";
	}
	else {
		$output = '<img src="'. file_create_url($outpath) .'" title="'. check_plain(t($args['title']['value'])) .'" ';
		$mapuri = $outpath .'.map';
		if ($args['imagemap']['value'] && _dokuwiki_filter_render($inpath, $mapuri, 'cmapx', $args['command']['value'])) {
			$map = file_get_contents($mapuri);
			$id = 'G';
			$match = array();
			if (preg_match('/<map[^>]*id\s*=\s*"(.*?)"/', $map, $match)) {
				$id = $match[1];
			}
			$output .= 'usemap="#'.$id.'" />';
			$output .= $map;
			$output .= "\n";
		}
		else {
			$output .= ' />';
		}
		$output .= "\n";
	}
	return $output;
}

/**
 * API function to render an Image_GraphViz graph.
 * dont see this one being called ?!
 */
function dokuwiki_filter_render($G, $application = '', $application_args = array(), $graph_args = array('formats' => 'png', 'imagemap' => TRUE)) {
	if (empty($G)) return '';

	// Allow other module to alter the graph.
	$graph = array('graph' => &$G, 'arguments' => &$graph_args);
	drupal_alter('graphviz_render', $graph, $temp=array('application' => $application, 'arguments' => $application_args));

	// Construct the arguments header.
	$header = "/*\n";
	foreach ($graph_args as $key => $value) {
		$header .= " * @$key = $value\n";
	}
	$header .= " */\n";
	
	// Convert the graph object to DOT syntax.
	$dot = $G->parse();

	// Render the whole thing.
	return dokuwiki_filterproc($header . $dot);
}

